
package application;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;

public class MainController {

	@FXML TextField _studentId;
	@FXML TextField _firstName;
	@FXML TextField _lastName;
	@FXML TextField _address;
	@FXML TextField _city;
	@FXML TextField _province;
	@FXML TextField _postalcode;

	@FXML TextField _searchID;


	@FXML private TableView<Model> table; //Instance variables
	@FXML private Button _backButton;
	@FXML private TableColumn<Model, String> table_studentId;
	@FXML private TableColumn<Model, String> table_firstName;
	@FXML private TableColumn<Model, String> table_lastName;
	@FXML private TableColumn<Model, String> table_address;
	@FXML private TableColumn<Model, String> table_city;
	@FXML private TableColumn<Model, String> table_province;
	@FXML private TableColumn<Model, String> table_postalcode;



	Connection _connection = null;

	public void onSearchClicked(ActionEvent event){ //Action when Search button is clicked

		this._connection = DBConnection.getConnection();
		String city = this._searchID.getText();

		try {
			ResultSet Students_value = this._connection.createStatement().executeQuery(
					String.format("SELECT * FROM students WHERE address = '%s'", city));

			this._connection.commit();

			if(Students_value.next()){

				this._studentId.setText(Students_value.getString("studentId"));
				this._firstName.setText(Students_value.getString("firstname"));
				this._lastName.setText(Students_value.getString("lastname"));
				this._address.setText(Students_value.getString("address"));
				this._city.setText(Students_value.getString("city"));
				this._province.setText(Students_value.getString("province"));
				this._postalcode.setText(Students_value.getString("postalCode"));

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			DBConnection.closeConnection();
		}
	}

	@FXML public void initialize(){
		ObservableList<Model> data = FXCollections.observableArrayList(); //Represent each objects from database.

		try {
			this._connection = DBConnection.getConnection();
			String city = this._searchID.getText();
			ResultSet student = this._connection.createStatement().executeQuery(String.format("SELECT * FROM students WHERE address = '%s'", city)); //Get all value of the game table
			//ResultSet playerResult = this._connection.createStatement().executeQuery("SELECT * FROM PLAYER");  //Get all value of the player table
			//ResultSet playerGameResult = this._connection.createStatement().executeQuery("SELECT * FROM PLAYERANDGAME");  //Get all value of the playergame table

			while(student.next()){ //Check new values until there are no value

				data.add(new Model(student.getString("studentId"),
						student.getString("firstname"), student.getString("lastname"),
						student.getString("address"),student.getString("city"),student.getString("province"),student.getString("postalCode")));

				table_studentId.setCellValueFactory(new PropertyValueFactory<>("_testtitle"));
				table_firstName.setCellValueFactory(new PropertyValueFactory<>("_id"));
				table_lastName.setCellValueFactory(new PropertyValueFactory<>("_firstName"));
				table_city.setCellValueFactory(new PropertyValueFactory<>("_lastName"));
				table_province.setCellValueFactory(new PropertyValueFactory<>("_lastName"));
				table_postalcode.setCellValueFactory(new PropertyValueFactory<>("_lastName"));

				table.setItems(data);
			}

		}

		catch (SQLException e){
			e.printStackTrace();
		}

		finally{
			DBConnection.closeConnection();
		}
	}

}